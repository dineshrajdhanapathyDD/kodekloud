

Questions:

We have a web server container running the nginx image. The access and error logs generated by the web server are not critical enough to be placed on a persistent volume. However, Nautilus developers need access to the last 24 hours of logs so that they can trace issues and bugs. Therefore, we need to ship the access and error logs for the web server to a log-aggregation service. Following the separation of concerns principle, we implement the Sidecar pattern by deploying a second container that ships the error and access logs from nginx. Nginx does one thing, and it does it well—serving web pages. The second container also specializes in its task—shipping logs. Since containers are running on the same Pod, we can use a shared emptyDir volume to read and write logs.


1. Create a pod named (webserver).

2. Create an (emptyDir) volume (shared-logs).

3. Create two containers from (nginx) and (ubuntu) images with (latest) tag only and remember to mention tag i.e (nginx:latest), nginx container name should be (nginx-container) and ubuntu container name should be (sidecar-container) on webserver pod.

4. Add command on sidecar-container ("sh","-c","while true; do cat /var/log/nginx/access.log /var/log/nginx/error.log; sleep 30; done")

5. Mount the volume (shared-logs) on both containers at location (/var/log/nginx), all containers should be up and running.

(Note): The (kubectl) utility on (jump_host) has been configured to work with the kubernetes cluster.


Solution:  
1. At first  kubectl  utility configure and working from jump server, run below commands

thor@jump_host ~$ kubectl get services
NAME         TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   ClusterIP   10.96.0.1    <none>        443/TCP   12m
thor@jump_host ~$ kubectl get pods
No resources found in default namespace.


2.  Create yaml  file with all the parameters

thor@jump_host ~$ vi /tmp/webserver.yaml
thor@jump_host ~$ cat /tmp/webserver.yaml
apiVersion: v1
kind: Pod
metadata:
  name: webserver
  labels:
    name: webserver
spec:
  volumes:
    - name: shared-logs
      emptyDir: {}
  containers:
    - name: nginx-container
      image: nginx:latest
      volumeMounts:
        - name: shared-logs
          mountPath: /var/log/nginx
    - name: sidecar-container
      image: ubuntu:latest
      command:
        [
          "/bin/bash",
          "-c",
          "while true; do cat /var/log/nginx/access.log /var/log/nginx/error.log; sleep 30; done",
        ]
      volumeMounts:
        - name: shared-logs
          mountPath: /var/log/nginx 


3.  Run the below command to create a pod

thor@jump_host ~$ kubectl create -f /tmp/webserver.yaml
pod/webserver created


4.  Wait for  pods to get running status

thor@jump_host ~$ kubectl get pods
NAME        READY   STATUS    RESTARTS   AGE
webserver   2/2     Running   0          43s


5. Validate the task by running below command

thor@jump_host ~$ kubectl describe pods
Name:             webserver   --> check the name as per questions
Namespace:        default
Priority:         0
Service Account:  default
Node:             kodekloud-control-plane/172.17.0.2
Start Time:       Thu, 14 Sep 2023 10:17:19 +0000
Labels:           name=webserver
Annotations:      <none>
Status:           Running
IP:               10.244.0.5
IPs:
  IP:  10.244.0.5
Containers:
  nginx-container:
    Container ID:   containerd://c1074c621ed26478eac98f3d227a5dc032aab23cc2b63868cb29979c855f9c74
    Image:          nginx:latest   -->check the image as per questions
    Image ID:       docker.io/library/nginx@sha256:6926dd802f40e5e7257fded83e0d8030039642e4e10c4a98a6478e9c6fe06153
    Port:           <none>
    Host Port:      <none>
    State:          Running
      Started:      Thu, 14 Sep 2023 10:17:33 +0000
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/log/nginx from shared-logs (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-7c72b (ro)
  sidecar-container:
    Container ID:  containerd://42ebcb2f83b35a7a34f81eb5a38415d1266978ebff99827d1a4954c2fe31e752
    Image:         ubuntu:latest  -->check the image as per questions
    Image ID:      docker.io/library/ubuntu@sha256:aabed3296a3d45cede1dc866a24476c4d7e093aa806263c27ddaadbdce3c1054
    Port:          <none>
    Host Port:     <none>
    Command:                      --> check the command
      /bin/bash
      -c
      while true; do cat /var/log/nginx/access.log /var/log/nginx/error.log; sleep 30; done
    State:          Running
      Started:      Thu, 14 Sep 2023 10:17:40 +0000
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/log/nginx from shared-logs (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-7c72b (ro)
Conditions:
  Type              Status
  Initialized       True 
  Ready             True 
  ContainersReady   True 
  PodScheduled      True 
Volumes:
  shared-logs:
    Type:       EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:     
    SizeLimit:  <unset>
  kube-api-access-7c72b:
    Type:                    Projected (a volume that contains injected data from multiple sources)
    TokenExpirationSeconds:  3607
    ConfigMapName:           kube-root-ca.crt
    ConfigMapOptional:       <nil>
    DownwardAPI:             true
QoS Class:                   BestEffort
Node-Selectors:              <none>
Tolerations:                 node.kubernetes.io/not-ready:NoExecute op=Exists for 300s
                             node.kubernetes.io/unreachable:NoExecute op=Exists for 300s
Events:
  Type    Reason     Age   From               Message
  ----    ------     ----  ----               -------
  Normal  Scheduled  99s   default-scheduler  Successfully assigned default/webserver to kodekloud-control-plane
  Normal  Pulling    98s   kubelet            Pulling image "nginx:latest"
  Normal  Pulled     85s   kubelet            Successfully pulled image "nginx:latest" in 12.241314079s (12.241344827s including waiting)
  Normal  Created    85s   kubelet            Created container nginx-container
  Normal  Started    85s   kubelet            Started container nginx-container
  Normal  Pulling    85s   kubelet            Pulling image "ubuntu:latest"
  Normal  Pulled     79s   kubelet            Successfully pulled image "ubuntu:latest" in 6.097036403s (6.09705774s including waiting)
  Normal  Created    79s   kubelet            Created container sidecar-container
  Normal  Started    78s   kubelet            Started container sidecar-container


6.  Click on Finish & Confirm to complete the task successful